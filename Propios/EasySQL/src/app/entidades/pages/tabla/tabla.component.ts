import { Component } from '@angular/core';

@Component({
  selector: 'app-tabla-page',
  templateUrl: './tabla-page.component.html',
  styles: ``,
})
export class TablePageComponent {
  public isLoading: boolean = false;
  public hasSendToGenerate: boolean = false;
  public sql: string = '';

  load(SQLStringContent: string) {
    this.isLoading = true;
    setTimeout(() => {
      this.generateSql(SQLStringContent);
      this.isLoading = false;
      this.hasSendToGenerate = true;
    }, 1000);
  }

  generateSql(SQLStringContent: string) {
    const columns = SQLStringContent.split(',');
    const tableName = columns[0];
    const tableDescription = columns[1];
    const currentDate = new Date().toLocaleDateString();

    this.sql = `
    -- =============================================
    -- NAME: ${tableName.toUpperCase()}
    -- AUTHOR: ?
    -- CREATION: ${currentDate}
    -- BBDD: CUSTOMER
    -- DESCRIPTION: ${tableDescription}
    -- =============================================
    IF NOT EXISTS (SELECT * FROM sys.objects WHERE name='${tableName.toUpperCase()}' AND type='U') 
    BEGIN
      CREATE TABLE [dbo].[${tableName.toUpperCase()}]
      (
        [${tableName.toUpperCase()}_ID] BIGINT IDENTITY(1,1) NOT NULL,
    `;

    for (let i = 2; i < columns.length; i += 3) {
      const columnName = columns[i];
      const columnType = columns[i + 1];

      this.sql += `    [${columnName.toUpperCase()}] ${columnType}`;

      if (i < columns.length - 3) {
        this.sql += `,`;
      }

      this.sql += `\n`;
    }

    this.sql += `
      -- =============================================
      -- Generate primary and foreign keys
      -- =============================================
      CONSTRAINT [PK_${tableName.toUpperCase()}_ID] PRIMARY KEY CLUSTERED ([${tableName.toUpperCase()}_ID] ASC)
      )
      ON [PRIMARY]
      -- =============================================
      -- Generate extended properties
      -- =============================================
      -- TABLE
      EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'${tableDescription}', @level0type=N'Schema', @level0name=N'dbo', @level1type=N'Table', @level1name='${tableName.toUpperCase()}'
      EXEC sys.sp_addextendedproperty @name=N'Unit',           @value=N'everilion-...', @level0type=N'Schema', @level0name=N'dbo', @level1type=N'Table', @level1name='${tableName.toUpperCase()}'
      -- PARAMETERS
      EXEC sys.sp_addextendedproperty @NAME=N'MS_Description', @value=N'Autogenerated id', @level0type=N'Schema', @level0name=N'dbo', @level1type=N'Table', @level1name='${tableName.toUpperCase()}', @level2type=N'Column', @level2name=N'${tableName.toUpperCase()}_ID'
    `;

    for (let i = 2; i < columns.length; i += 3) {
      const columnName = columns[i]?.trim();
      const columnDescription = columns[i + 2]?.trim();
      if (columnName) {
        this.sql += `  EXEC sys.sp_addextendedproperty @NAME=N'MS_Description', @value=N'${columnDescription}', @level0type=N'Schema', @level0name=N'dbo', @level1type=N'Table', @level1name='${tableName.toUpperCase()}', @level2type=N'Column', @level2name=N'${columnName.toUpperCase()}'\n`;
      }
    }
    this.sql += `END`;
  }
}
